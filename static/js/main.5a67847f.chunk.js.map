{"version":3,"sources":["Components/UsersList.js","Components/UsersFunctional.js","App.js","serviceWorker.js","index.js"],"names":["UsersList","props","usersListElements","usersList","map","user","key","id","name","onClick","deleteUserMethod","className","UsersFunctional","useState","users","setUsers","input","setInput","onSubmit","event","preventDefault","length","newUser","Date","now","concat","alert","type","placeholder","value","onChange","target","userID","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAceA,G,YAXG,SAACC,GACjB,IACIC,EADYD,EAAME,UACYC,KAAI,SAACC,GAAD,OACpC,wBAAIC,IAAKD,EAAKE,IACXF,EAAKG,KADR,IACc,0BAAMC,QAAS,kBAAMR,EAAMS,iBAAiBL,EAAKE,MAAjD,SAIhB,OAAO,wBAAII,UAAU,QAAQT,KCsChBU,EA7CS,SAACX,GAAW,IAAD,EACPY,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,OAEPF,mBAAS,IAFF,mBAE1BG,EAF0B,KAEnBC,EAFmB,KAYjC,OACE,yBAAKN,UAAU,cACb,2CACA,0BACEO,SAAU,SAACC,GAET,GADAA,EAAMC,iBACFJ,EAAMK,OAAS,EAAG,CACpB,IAAIC,EAAU,CACZf,GAAIgB,KAAKC,MACThB,KAAMQ,GAERD,EAASD,EAAMW,OAAOH,IACtBL,EAAS,SAETS,MAAM,gCAIV,2BACEC,KAAK,OACLC,YAAY,aACZC,MAAOb,EACPc,SAAU,SAACX,GACTF,EAASE,EAAMY,OAAOF,UAG1B,4BAAQF,KAAK,UAAb,aAEF,kBAAC,EAAD,CAAWxB,UAAWW,EAAOJ,iBApCd,SAACsB,GAClBjB,EACED,EAAMmB,QAAO,SAAC5B,GACZ,OAAOA,EAAKE,KAAOyB,WCEZE,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCIcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a67847f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Styles/UsersList.css\";\r\n\r\nconst UsersList = (props) => {\r\n  let usersList = props.usersList;\r\n  let usersListElements = usersList.map((user) => (\r\n    <li key={user.id}>\r\n      {user.name} <span onClick={() => props.deleteUserMethod(user.id)}>X</span>\r\n    </li>\r\n  ));\r\n\r\n  return <ul className=\"list\">{usersListElements}</ul>;\r\n};\r\n\r\nexport default UsersList;\r\n","import React, { useState } from \"react\";\r\nimport \"../Styles/Users.css\";\r\nimport UsersList from \"./UsersList\";\r\n\r\nconst UsersFunctional = (props) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const deleteUser = (userID) => {\r\n    setUsers(\r\n      users.filter((user) => {\r\n        return user.id !== userID;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"users-main\">\r\n      <h1>User's list</h1>\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          if (input.length > 1) {\r\n            let newUser = {\r\n              id: Date.now(),\r\n              name: input,\r\n            };\r\n            setUsers(users.concat(newUser));\r\n            setInput(\"\");\r\n          } else {\r\n            alert(\"User name can not be empty\");\r\n          }\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          value={input}\r\n          onChange={(event) => {\r\n            setInput(event.target.value);\r\n          }}\r\n        />\r\n        <button type=\"submit\">Add user</button>\r\n      </form>\r\n      <UsersList usersList={users} deleteUserMethod={deleteUser} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersFunctional;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport UsersFunctional from \"./Components/UsersFunctional\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <UsersFunctional />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}